generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = false // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chef_ranks {
  APPRENTICE_CHEF
  SOUS_CHEF
  EXECUTIVE_CHEF
  HEAD_CHEF
  MICHELIN_STARRED_CHEF
  CHEF_PATRON
  MASTER_CHEF
  CULINARY_DIRECTORY
}

enum Meal_role {
  MAIN_DISH
  SIDE_DISH
  DESSERT
}

enum Tags {
  VEGAN
  VEGETARIAN
  GLUTEN_FREE
  DAIRY_FREE
  LOW_CARB
  PALEO
  KOSHER
  HALAL
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Units {
  GRAM
  KILOGRAM
  MILILITER
  LITER
  TABLESPOON
  TEASPOON
  PIECE
}

model User {
  id       Int     @id @unique @default(autoincrement())
  username String  @unique
  address  String  @unique
  avatar   String?
  bio      String?
  country_a3  String
  twitter  String?
  discord  String?

  chef_rank Chef_ranks @default(APPRENTICE_CHEF)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //Each user can create several recipes
  recipes Recipe[] @relation("CreatedRecipes")

  //Each user can create several reviews
  reviews Review[] @relation("CreatedReviews")

  //Each user has a single country
  country Country @relation("UserCountry", fields: [country_a3], references: [a3])

  //Each user can have several followers
  followers Follow[] @relation("Following")

  //Each user can follow several users
  following Follow[] @relation("Followers")

  @@map("users")
}

model Follow {
  followerId Int
  
  //The user who is following
  follower   User @relation("Followers", fields: [followerId], references: [id])

  followingId Int

  //Who the follower is following
  following   User @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@map("follows")
}

model Recipe {
  id             Int           @id @unique @default(autoincrement())
  name           String
  description    String
  country_a3        String        // ISO 3166
  images         String[]
  duration       Int           // minutes
  diffulty       Difficulty
  instructions         String        // Cooking instructions
  meal_role      Meal_role
  tags           Tags[]
  overall_rating Float        // 1, 1.5, 2, 2.5, ..., 5

  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  created_by     Int
  //A recipe is created by a single user
  recipe_creator User         @relation("CreatedRecipes", fields: [created_by], references: [id])

  //A recipe can have several reviews
  reviews        Review[]      @relation("ReviewedRecipes")

  //A recipe is composed of several items [ingredient_id,unit,quantity]
  items          Recipe_item[]

    //Each recipe has a single country
  recipe_country Country @relation("RecipeCountry", fields: [country_a3], references: [a3])

  @@map("recipes")
}

model Recipe_item {
  id           Int     @id @unique @default(autoincrement())
  ingedient_id Int
  unit         Units
  quantity     Float

  recipe_id    Int
  //A recipe item is linked to a single recipe
  recipe       Recipe @relation(fields: [recipe_id], references: [id]) // Connect Recipe_item to Recipe

  //A recipe item is linked to a single ingredient
  ingredient   Ingredient @relation(fields: [ingedient_id], references: [id])

  @@map("recipe_items")
}

model Review {
  id         Int      @id @unique @default(autoincrement())
  created_at DateTime @default(now())

  title String

  rating  Float @default(0) //1-5 by 0.5 increment

  description String?

  reviewed_by_user_id    Int
  //A review has a single author
  reviewer User @relation("CreatedReviews", fields: [reviewed_by_user_id], references: [id])

  reviewed_recipe_id   Int
  //A review belongs to a single recipe
  reviewed_recipe Recipe @relation("ReviewedRecipes", fields: [reviewed_recipe_id], references: [id])

  @@map("reviews")
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  name        String @unique()
  description String?
  thumbnail   String?

  //Not a foreign key as default ingredients are added by nobody but still useful to track user-added rows
  created_by_user_id Int?

  //An ingredient can be used in several recipe items
  used_in Recipe_item[]

  @@map("ingredients")
}

model Country {
  //ISO 3166

  id Int @id @default(autoincrement())

  name String @unique()
  a2   String @unique()
  a3   String @unique()
  flag String?

  //A country can have several users
  users User[] @relation("UserCountry")

  recipes Recipe[] @relation("RecipeCountry")

  @@map("countries")
}
